openapi: "3.0.2"
info:
  title: Timeey Server
  version: "1.0"
servers:
  - url: https://pamnani-time-server-jxze5dvqeq-uc.a.run.app
    description: "Cloud Run Server"
  - url: http://localhost:3000
    description: "Local Development"
paths:
  /:
    get:
      description: "Hello World Page"
      operationId: "base"
      tags:
        - "Public"
      responses:
        "200":
          description: Hello World Page - Useful for checking is the API is running
  /docs:
    get:
      description: "Get Swagger Docs"
      operationId: "get-swagger"
      tags:
        - "Public"
      responses:
        "200":
          description: "Swagger Docs"

  /redoc:
    get:
      description: "Get Redoc Docs"
      operationId: "get-redoc"
      tags:
        - "Public"
      responses:
        "200":
          description: "Redoc Docs"

  /api/v1/users:
    get:
      description: "Get a list of all users"
      operationId: "get-users"
      tags:
        - "Public"
      responses:
        "200":
          description: "A list of all users"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["Pranav", "Madeeha"]

  /api/v1/verify-credentials:
    post:
      description: "Verify a user's credentials"
      operationId: "verify-credentials"
      tags:
        - "Authenticated"
      security:
        - BasicAuth: []
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/v1/user/history:
    get:
      description: "Get user's timesheet history"
      operationId: "get-history"
      tags:
        - "Authenticated"
      security:
        - BasicAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Timesheet-Record"
              example:
                - username: "Suk Deep"
                  startDatetime: "2023-07-15T18:05:00.000Z"
                  endDatetime: "2023-07-15T21:55:00.000Z"
                  totalTime: "03:45"
                  status: "Pending"
                - username: "Suk Deep"
                  startDatetime: "2023-07-13T00:03:00.000Z"
                  endDatetime: "2023-07-13T02:10:00.000Z"
                  totalTime: "02:00"
                  status: "Approved"
                - username: "Suk Deep"
                  startDatetime: "2023-07-19T15:00:35-06:00"
                  status: "CLOCKED IN"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/v1/user/clock-in:
    post:
      description: "Create a new timesheet record for user"
      operationId: "create-timesheet-record"
      tags:
        - "Authenticated"
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startDatetime:
                  type: string
                  format: date-time
                  description: "Start datetime formatted as an ISO 8601 string (YYYY-MM-DDTHH:mm:ss.sssZ or YYYY-MM-DDTHH:mm:ss.sss+hh:mm)"
            example:
              startDatetime: "2023-07-19T15:00:35-06:00"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Timesheet-Record"
              examples:
                Suk Deep's Saturday Entry:
                  value:
                    username: "Suk Deep"
                    startDatetime: "2023-07-19T15:00:35-06:00"
                    status: "CLOCKED IN"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Invalid Datetime:
                  value:
                    errors:
                      - type: "invalid_string"
                        message: "Invalid datetime format. Expected ISO 8601 format."
                        code: 400
                        data:
                          path: ["startDatetime"]
                Missing Required Parameter:
                  value:
                    errors:
                      - type: "invalid_type"
                        message: "Required"
                        code: 400
                        data:
                          path: ["startDatetime"]
        "409":
          description: "Conflict - You are already clocked in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                errors:
                  - type: "CLOCK_IN_ERROR"
                    message: "You are already clocked in"
                    code: 409
                    data:
                      "clockedInRecord":
                        "username": "Suk Deep"
                        "date": "2023-07-15"
                        "startTime": "12:05"
                        "status": "CLOCKED IN"
                      "clockInIndex": 26

        "401":
          $ref: "#/components/responses/Unauthorized"
  /api/v1/user/clock-out:
    post:
      description: "Clock out user"
      operationId: "clock-out"
      tags:
        - "Authenticated"
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                endDatetime:
                  type: string
                  format: date-time
                  description: "End datetime formatted as an ISO 8601 string (YYYY-MM-DDTHH:mm:ss.sssZ or YYYY-MM-DDTHH:mm:ss.sss+hh:mm)"
                totalTime:
                  type: string
                  description: "Total time formatted as HH:mm"
            example:
              endDatetime: "2023-07-19T20:00:35-06:00"
              totalTime: "05:00"
      responses:
        "200":
          description: "Clocked Out Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Timesheet-Record"
              example:
                username: "Suk Deep"
                startDatetime: "2023-07-19T21:00:00.000Z"
                endDatetime: "2023-07-19T20:00:35-06:00"
                totalTime: "05:00"
                status: "PENDING APPROVAL"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Different Start and End Date:
                  value:
                    errors:
                      - type: "invalid_date"
                        message: "Start Date: '2023-07-10' and End Date: '2023-07-12' must be the same"
                        code: 400
                Start Datetime is after End Datetime:
                  value:
                    errors:
                      - type: "invalid_date"
                        message: "Start Datetime: '2023-07-12' must be before End Datetime: '2023-07-10'"
                        code: 400
                        data:
                          startDatetime: "2023-07-12T00:00:00.000Z"
                          endDatetime: "2023-07-10T00:00:00.000Z"
                Invalid Datetime:
                  value:
                    errors:
                      - type: "invalid_string"
                        message: "Invalid datetime format. Expected ISO 8601 format."
                        code: 400
                        data:
                          path: ["startDatetime"]
                Missing Required Parameter:
                  value:
                    errors:
                      - type: "invalid_type"
                        message: "Required"
                        code: 400
                        data:
                          path: ["endDatetime"]
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Timesheet-Record:
      type: object
      required:
        - "username"
        - "startDatetime"
        - "status"
      properties:
        username:
          type: string
          description: "Username"
        startDatetime:
          type: string
          format: date-time
          description: "Start datetime formatted as an ISO 8601 string (YYYY-MM-DDTHH:mm:ss.sssZ or YYYY-MM-DDTHH:mm:ss.sss+hh:mm)"
        endDatetime:
          type: string
          format: date-time
          description: "End datetime formatted as an ISO 8601 string (YYYY-MM-DDTHH:mm:ss.sssZ or YYYY-MM-DDTHH:mm:ss.sss+hh:mm)"
        totalTime:
          type: string
          description: "Calculated rounded duration (HH:mm or HH:mm:ss)"
        status:
          type: string
          description: "Timesheet record status"
    Error:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            required:
              - type
              - message
              - code
            properties:
              type:
                type: string
                description: "Error type"
              message:
                type: string
                description: "User friendly error message"
              code:
                type: integer
                description: "Error code"
                example: 400
              data:
                type: object
                description: "Additional error data"
                nullable: true
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            Invalid-Credentials:
              value:
                errors:
                  - type: "Invalid Credentials"
                    message: "Invalid username or password"
                    code: 401
            Invalid Credentials:
              value:
                errors:
                  - type: "invalid_credentials"
                    message: "Invalid credentials"
                    code: 401
